<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="regAndViewMapper">

<!--    책 정보 끌고오기-->
    <select id="selectBookList" resultMap="libraryBookMapper.libraryBook">
        SELECT
        BOOK_CODE ,
        BOOK_TITLE ,
        BOOK_WRITER ,
        BOOK_PUB ,
        BOOK_YEAR
        FROM
        book
    </select>
<!--    책 하나 찾기-->
    <select id="selectOneBook" resultMap="libraryBookMapper.libraryBook">
        SELECT
            BOOK.BOOK_CODE,
            BOOK.BOOK_TITLE,
            BOOK.BOOK_WRITER,
            BOOK.BOOK_PUB,
            BOOK.BOOK_YEAR,
            book_info.BOOK_INFO_NUM,
            book_info.BOOK_BORROW_CNT,
            book_info.BOOK_BORROW_AVAILABLE,
            book_info.BOOK_INFO_ORIGIN_FILE_NAME,
            book_info.BOOK_INFO_ATTACHED_FILE_NAME,
            book_info.BOOK_REGDATE,
            book_info.BOOK_INTRO,
            book_info.BOOK_CATE_CODE,
            book_info.BOOK_MID_CATE_CODE
        FROM
            book LEFT OUTER JOIN book_info
        ON
            book.BOOK_CODE = book_info.BOOK_CODE
        WHERE
            book.BOOK_CODE = #{bookCode};
    </select>



<!--    책 업데이트-->
    <update id="updateBook">
        UPDATE book
        set
            BOOK_TITLE = #{bookTitle},
            BOOK_WRITER = #{bookWriter} ,
            BOOK_PUB = #{bookPub} ,
            BOOK_YEAR = #{bookYear}
        WHERE
            BOOK_CODE = #{bookCode}
    </update>

<!--    책 상세정보 업데이트-->
    <update id="updateBookInfo">
        UPDATE book_info
        SET
            BOOK_INFO_ATTACHED_FILE_NAME = #{libraryBookInfoVO.bookInfoAttachedFileName} ,
            BOOK_INFO_ORIGIN_FILE_NAME = #{libraryBookInfoVO.bookInfoOriginFileName} ,
            BOOK_INTRO = #{libraryBookInfoVO.bookIntro} ,
            BOOK_CATE_CODE = #{libraryBookInfoVO.bookCateCode} ,
            BOOK_MID_CATE_CODE = #{libraryBookInfoVO.bookMidCateCode}
        WHERE
            BOOK_CODE = #{libraryBookInfoVO.bookCode}
    </update>

<!--    책 갯수-->
    <select id="selectBookCnt" resultType="int">
        select count(*)
        from book
        where
        1 = 1
        <if test='searchValue != null and !searchValue.equals("")'>
            and ${searchType} LIKE CONCAT('%',#{searchValue},'%')
        </if>
    </select>

<!--    검색기능-->
    <select id="searchBookList" resultMap="libraryBookMapper.libraryBook">
        SELECT
            BOOK_CODE ,
            BOOK_TITLE ,
            BOOK_WRITER ,
            BOOK_PUB ,
            BOOK_YEAR
        FROM
            BOOK
        WHERE
            1 = 1
            <if test='searchValue != null and !searchValue.equals("")'>
                AND ${searchType} LIKE CONCAT('%',#{searchValue},'%')
            </if>
        ORDER BY book_code
        LIMIT ${displayDataCnt} offset ${(displayDataCnt) * (nowPage - 1)}
    </select>

<!--    책 상세 정보 보기!!-->
    <select id="bookDetailInfo" resultMap="memberMapper.users">
        SELECT
            BOOK.BOOK_CODE ,
            BOOK.BOOK_TITLE ,
            BOOK.BOOK_WRITER ,
            BOOK.BOOK_PUB ,
            BOOK.BOOK_YEAR ,
            book_info.BOOK_BORROW_AVAILABLE ,
            book_info.BOOK_BORROW_CNT ,
            book_info.BOOK_INFO_ORIGIN_FILE_NAME ,
            book_info.BOOK_INFO_ATTACHED_FILE_NAME ,
            book_info.BOOK_INTRO ,
            book_info.BOOK_REGDATE,
            book_info.BOOK_CATE_CODE ,
            book_category.BOOK_CATE_NAME ,
            book_info.BOOK_MID_CATE_CODE ,
            book_mid_category.BOOK_MID_CATE_NAME ,
            book_bnr.BORROW_CODE ,
            book_bnr.BORROW_DATE ,
            book_bnr.RETURN_YN,
            book_bnr.EX_RETURN_DATE ,
            booK_bnr.RETURN_DATE,
            book_bnr.USER_CODE ,
            users.USER_NAME,
            users.USER_ID
        FROM
            book LEFT OUTER join book_info
            ON BOOK.BOOK_CODE = book_info.BOOK_CODE
            LEFT OUTER JOIN book_category
            ON book_info.BOOK_CATE_CODE = book_category.BOOK_CATE_CODE
            LEFT OUTER JOIN book_mid_category
            ON book_info.BOOK_MID_CATE_CODE = book_mid_category.BOOK_MID_CATE_CODE
            LEFT OUTER JOIN booK_bnr
            ON BOOK.BOOK_CODE = booK_bnr.BOOK_CODE
            LEFT OUTER JOIN users
            ON book_bnr.USER_CODE = users.USER_CODE
        where
            BOOK.book_code = #{bookCode}
        ORDER BY book.BOOK_CODE;
    </select>

<!--    카테고리 이름 구하기-->
    <select id="selectCateNameOne" resultMap="libraryBookMapper.LibraryCate">
        SELECT
        book_cate_name ,
        book_mid_cate_name
        FROM book_info INNER JOIN book_category
        ON book_info.BOOK_CATE_CODE = book_category.BOOK_CATE_CODE
        INNER JOIN book_mid_category
        ON book_info.BOOK_MID_CATE_CODE = book_mid_category.BOOK_MID_CATE_CODE
        WHERE book_code = #{bookCode};
    </select>


    <!--    책 제외 하기전 처음할거-->
    <delete id="DeleteBookOne">
        DELETE FROM book_info
        WHERE book_code = #{bookCode}
    </delete>
    <!-- 책 제외 하기전 두번째로 할거-->
    <delete id="DeleteBookTwo">
        DELETE FROM book
        WHERE book_code = #{bookCode}
    </delete>

<!--    파손된 책 테이블로 옮기기 1-->
    <insert id="insertBookBreakageOne">
        INSERT INTO BOOK_BREAKAGE (
        BOOK_CODE ,
        BOOK_TITLE ,
        BOOK_WRITER ,
        BOOK_PUB ,
        BOOK_YEAR)
        VALUES (
        #{bookCode} ,
        #{bookTitle} ,
        #{bookWriter} ,
        #{bookPub} ,
        #{bookYear})
    </insert>


    <!--    파손된책 테이블로 옮기기 2-->
    <insert id="insertBookBreakageInfoOne">
        INSERT INTO BOOK_BREAKAGE_INFO (
            BOOK_INFO_NUM,
            BOOK_INFO_ATTACHED_FILE_NAME ,
            BOOK_INFO_ORIGIN_FILE_NAME ,
            BOOK_BORROW_AVAILABLE ,
            BOOK_BORROW_CNT ,
            BOOK_INTRO ,
            BOOK_REGDATE ,
            BOOK_CATE_CODE ,
            BOOK_MID_CATE_CODE ,
            BOOK_CODE)
        VALUES(
            #{libraryBookInfoVO.bookInfoNum},
            #{libraryBookInfoVO.bookInfoAttachedFileName},
            #{libraryBookInfoVO.bookInfoOriginFileName},
            #{libraryBookInfoVO.bookBorrowAvailable},
            #{libraryBookInfoVO.bookBorrowCnt},
            #{libraryBookInfoVO.bookIntro},
            #{libraryBookInfoVO.bookRegTime},
            #{libraryBookInfoVO.bookCateCode},
            #{libraryBookInfoVO.bookMidCateCode},
            #{bookCode})
    </insert>









<!--    프로시져 쓸 줄 몰라서 쓴 초기화 쿼리문임 가능하면 건드지 마십쇼-->
    <insert id="bookInfoInit">
        INSERT INTO book_info(
        BOOK_INFO_ATTACHED_FILE_NAME ,
        BOOK_INFO_ORIGIN_FILE_NAME ,
        BOOK_INTRO ,
        BOOK_CATE_CODE ,
        BOOK_CODE)
        VALUE
        <foreach collection="list" item="item" separator=",">
            (
            'book_character_smile.png',
            'book_character_smile.png' ,
            '초기화',
            1,
            CONCAT('GR',LPAD(#{item},10,'0'))
            )
        </foreach>
    </insert>
</mapper>































